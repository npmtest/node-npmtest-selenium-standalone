{"/home/travis/build/npmtest/node-npmtest-selenium-standalone/test.js":"/* istanbul instrument in package npmtest_selenium_standalone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/lib.npmtest_selenium_standalone.js":"/* istanbul instrument in package npmtest_selenium_standalone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_selenium_standalone = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_selenium_standalone = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-selenium-standalone && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_selenium_standalone */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_selenium_standalone\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_selenium_standalone.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_selenium_standalone.rollup.js'] =\n            local.assetsDict['/assets.npmtest_selenium_standalone.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_selenium_standalone.__dirname + '/lib.npmtest_selenium_standalone.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/index.js":"var debugEnvDetails = require('./lib/debug-environment-details');\n\nmodule.exports = {\n  install: require('./lib/install'),\n  start: require('./lib/start')\n};\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/debug-environment-details.js":"var os = require('os');\n\nvar debug = require('debug')('selenium-standalone:env-details');\n\ndebug('Platform:', os.platform(), os.release());\ndebug('Architecture:', process.arch);\ndebug('Node.js:', process.version);\ndebug('CWD:', process.cwd());\ndebug('Module Path:', __dirname);\ndebug('Package Version:', require('../package.json').version);\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/install.js":"module.exports = install;\n\nvar async = require('async');\nvar crypto = require('crypto');\nvar debug = require('debug')('selenium-standalone:install');\nvar fs = require('fs');\nvar merge = require('lodash').merge;\nvar mapValues = require('lodash').mapValues;\nvar mkdirp = require('mkdirp');\nvar path = require('path');\nvar request = require('request');\nvar tarStream = require('tar-stream');\n\nvar computeDownloadUrls = require('./compute-download-urls');\nvar computeFsPaths = require('./compute-fs-paths');\nvar defaultConfig = require('./default-config');\nvar noop = require('./noop');\n\nfunction install(opts, cb) {\n  debug('Install API called with', opts);\n\n  var total = 0;\n  var progress = 0;\n  var startedRequests = 0;\n  var expectedRequests;\n  var requestOpts = {followAllRedirects: true};\n\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  var logger = opts.logger || noop;\n\n  if (!opts.baseURL) {\n    opts.baseURL = defaultConfig.baseURL;\n  }\n\n  if (!opts.version) {\n    opts.version = defaultConfig.version;\n  }\n\n  if (opts.drivers) {\n    // Merge in missing driver options for those specified\n    opts.drivers = mapValues(opts.drivers, function(config, name) {\n      return merge({}, defaultConfig.drivers[name], config);\n    });\n  } else {\n    opts.drivers = defaultConfig.drivers;\n  }\n\n  if (process.platform !== 'win32') {\n    delete opts.drivers.ie;\n  }\n  expectedRequests = Object.keys(opts.drivers).length + 1;\n\n  if (opts.proxy) {\n    requestOpts.proxy = opts.proxy;\n  }\n\n  opts.progressCb = opts.progressCb || noop;\n\n  logger('----------');\n  logger('selenium-standalone installation starting');\n  logger('----------');\n  logger('');\n\n  var fsPaths = computeFsPaths({\n    seleniumVersion: opts.version,\n    drivers: opts.drivers,\n    basePath: opts.basePath\n  });\n\n  var urls = computeDownloadUrls({\n    seleniumVersion: opts.version,\n    seleniumBaseURL: opts.baseURL,\n    drivers: opts.drivers\n  });\n\n  logInstallSummary(logger, fsPaths, urls);\n\n  var tasks = [\n    createDirs.bind(null, fsPaths),\n    download.bind(null, {\n      urls: urls,\n      fsPaths: fsPaths\n    }),\n    asyncLogEnd.bind(null, logger)\n  ];\n\n  if (fsPaths.chrome) {\n    tasks.push(setDriverFilePermissions.bind(null, fsPaths.chrome.installPath));\n  }\n\n  if (fsPaths.firefox) {\n    tasks.push(setDriverFilePermissions.bind(null, fsPaths.firefox.installPath));\n  }\n\n  async.series(tasks, function(err) {\n    cb(err, fsPaths);\n  });\n\n  function onlyInstallMissingFiles(opts, cb) {\n    async.waterfall([\n      checksum.bind(null, opts.to),\n      isUpToDate.bind(null, opts.from, requestOpts)\n    ], function (error, isLatest) {\n      if (error) {\n        return cb(error);\n      }\n\n      // File already exists. Prevent download/installation.\n      if (isLatest) {\n        logger('---');\n        logger('File from ' + opts.from + ' has already been downloaded');\n        expectedRequests -= 1;\n        return cb();\n      }\n\n      opts.installer.call(null, {\n        to: opts.to,\n        from: opts.from\n      }, cb);\n    });\n  }\n\n  function download(opts, cb) {\n    var installers = [{\n      installer: installSelenium,\n      from: opts.urls.selenium,\n      to: opts.fsPaths.selenium.downloadPath\n    }];\n\n    if (opts.fsPaths.chrome) {\n      installers.push({\n        installer: installChromeDr,\n        from: opts.urls.chrome,\n        to: opts.fsPaths.chrome.downloadPath\n      });\n    }\n\n    if (process.platform === 'win32' && opts.fsPaths.ie) {\n      installers.push({\n        installer: installIeDr,\n        from: opts.urls.ie,\n        to: opts.fsPaths.ie.downloadPath\n      });\n    }\n\n    if (opts.fsPaths.firefox) {\n      installers.push({\n        installer: installFirefoxDr,\n        from: opts.urls.firefox,\n        to: opts.fsPaths.firefox.downloadPath\n      })\n    }\n\n    var steps = installers.map(function (opts) {\n      return onlyInstallMissingFiles.bind(null, opts);\n    });\n\n    async.parallel(steps, cb);\n  }\n\n  function installSelenium(opts, cb) {\n    getDownloadStream(opts.from, function(err, stream) {\n      if (err) {\n        return cb(err);\n      }\n\n      stream\n        .pipe(fs.createWriteStream(opts.to))\n        .once('error', cb.bind(null, new Error('Could not write to ' + opts.to)))\n        .once('finish', cb);\n    });\n  }\n\n  function installChromeDr(opts, cb) {\n    installZippedFile(opts.from, opts.to, cb);\n  }\n\n  function installIeDr(opts, cb) {\n    installZippedFile(opts.from, opts.to, cb);\n  }\n\n  function installFirefoxDr(opts, cb) {\n    // only windows build is a zip\n    if (path.extname(opts.from) === '.zip') {\n      installZippedFile(opts.from, opts.to, cb);\n    } else {\n      installGzippedFile(opts.from, opts.to, cb);\n    }\n  }\n\n  function installGzippedFile(from, to, cb) {\n    getDownloadStream(from, function(err, stream) {\n      if (err) {\n        return cb(err);\n      }\n      // Store downloaded compressed file\n      var gzipWriteStream = fs.createWriteStream(to)\n        .once('error', cb.bind(null, new Error('Could not write to ' + to)));\n      stream.pipe(gzipWriteStream);\n\n      gzipWriteStream.once('finish', uncompressGzippedFile.bind(null, from, to, cb));\n    });\n  }\n\n  function uncompressGzippedFile(from, gzipFilePath, cb) {\n    var gunzip = require('zlib').createGunzip();\n    var extractPath = path.join(path.dirname(gzipFilePath), path.basename(gzipFilePath, '.gz'));\n    var writeStream = fs.createWriteStream(extractPath).once('error',\n      function(error) {\n        cb.bind(null, new Error('Could not write to ' + extractPath));\n      }\n    );\n    var gunzippedContent = fs.createReadStream(gzipFilePath).pipe(gunzip)\n        .once('error', cb.bind(null, new Error('Could not read ' + gzipFilePath)));\n\n    if (from.substr(-7) === '.tar.gz') {\n      var extractor = tarStream.extract();\n      var fileAlreadyUnarchived = false;\n      var cbCalled = false;\n\n      extractor\n        .on('entry', function(header, stream, callback) {\n          if (fileAlreadyUnarchived) {\n            if (!cbCalled) {\n              cb(new Error('Tar archive contains more than one file'));\n              cbCalled = true;\n            }\n            fileAlreadyUnarchived = true;\n          }\n          stream.pipe(writeStream);\n          stream.on('end', function() {\n            callback();\n          })\n          stream.resume();\n        })\n        .on('finish', function() {\n          if (!cbCalled) {\n            cb();\n            cbCalled = true;\n          }\n        });\n      gunzippedContent.pipe(extractor);\n    } else {\n      gunzippedContent.pipe(writeStream).on('finish', function() { cb(); });\n    }\n  }\n\n  function installZippedFile(from, to, cb) {\n    getDownloadStream(from, function(err, stream) {\n      if (err) {\n        return cb(err);\n      }\n\n      // Store downloaded compressed file\n      var zipWriteStream = fs.createWriteStream(to)\n        .once('error', cb.bind(null, new Error('Could not write to ' + to)));\n      stream.pipe(zipWriteStream);\n\n      // Uncompress downloaded file\n      zipWriteStream.once('finish',\n        uncompressDownloadedFile.bind(null, to, cb)\n      );\n    });\n  }\n\n  function getDownloadStream(downloadUrl, cb) {\n    var r = request(downloadUrl, requestOpts)\n      .on('response', function(res) {\n        startedRequests += 1;\n\n        if (res.statusCode !== 200) {\n          return cb(new Error('Could not download ' + downloadUrl));\n        }\n\n        res.on('data', function(chunk) {\n          progress += chunk.length;\n          updateProgressPercentage(chunk.length);\n        });\n\n        total += parseInt(res.headers['content-length'], 10);\n\n        cb(null, res);\n      })\n      .once('error', function(error) {\n        cb(new Error('Could not download ' + downloadUrl + ': ' + error));\n      });\n\n    // initiate request\n    r.end();\n  }\n\n  function uncompressDownloadedFile(zipFilePath, cb) {\n    debug('unzip ' + zipFilePath);\n\n    var yauzl = require('yauzl');\n    var extractPath = path.join(path.dirname(zipFilePath), path.basename(zipFilePath, '.zip'));\n\n    yauzl.open(zipFilePath, {lazyEntries: true}, function onOpenZipFile(err, zipFile) {\n      if (err) {\n        cb(err);\n        return;\n      }\n      zipFile.readEntry();\n      zipFile.once('entry', function (entry) {\n        zipFile.openReadStream(entry, function onOpenZipFileEntryReadStream(err, readStream) {\n          if (err) {\n            cb(err);\n            return;\n          }\n          var extractWriteStream = fs.createWriteStream(extractPath)\n            .once('error', cb.bind(null, new Error('Could not write to ' + extractPath)));\n          readStream\n            .pipe(extractWriteStream)\n            .once('error', cb.bind(null, new Error('Could not read ' + zipFilePath)))\n            .once('finish', function onExtracted() {\n              zipFile.close();\n              cb();\n            });\n        });\n      });\n    })\n  }\n\n  function updateProgressPercentage(chunk) {\n    if (expectedRequests === startedRequests) {\n      opts.progressCb(total, progress, chunk);\n    }\n  }\n}\n\nfunction asyncLogEnd(logger, cb) {\n  setImmediate(function() {\n    logger('');\n    logger('');\n    logger('-----');\n    logger('selenium-standalone installation finished');\n    logger('-----');\n    cb();\n  });\n}\n\nfunction createDirs(paths, cb) {\n  var installDirectories =\n    Object\n      .keys(paths)\n      .map(function(name) {\n        return paths[name].installPath;\n      });\n\n  async.eachSeries(\n    installDirectories.map(basePath),\n    mkdirp,\n    cb\n  );\n}\n\nfunction basePath(fullPath) {\n  return path.dirname(fullPath);\n}\n\nfunction setDriverFilePermissions(where, cb) {\n  debug('setDriverFilePermissions', where);\n\n  var chmod = function () {\n    debug('chmod 0755 on', where);\n    fs.chmod(where, '0755', cb);\n  };\n\n  // node.js 0.10.x does not support fs.access\n  if (fs.access) {\n    fs.stat(where, function(err, stat) {\n      debug('%s stats : %O', where, stat);\n    });\n    fs.access(where, fs.R_OK | fs.X_OK, function(err) {\n      if (err) {\n        debug('error in fs.access', where, err);\n        chmod();\n      } else {\n        return cb();\n      }\n    }.bind(this));\n  } else {\n    chmod();\n  }\n}\n\nfunction logInstallSummary(logger, paths, urls) {\n  ['selenium', 'chrome', 'ie', 'firefox'].forEach(function log(name) {\n    if (!paths[name]) {\n      return;\n    }\n\n    logger('---');\n    logger(name + ' install:');\n    logger('from: ' + urls[name]);\n    logger('to: ' + paths[name].installPath);\n  });\n}\n\nfunction checksum (filepath, cb) {\n  if (!fs.existsSync(filepath)) {\n    return cb(null, null);\n  }\n\n  var hash = crypto.createHash('md5');\n  var stream = fs.createReadStream(filepath);\n\n  stream.on('data', function (data) {\n    hash.update(data, 'utf8');\n  }).on('end', function () {\n    cb(null, hash.digest('hex'));\n  }).once('error', cb);\n}\n\nfunction unquote (str, quoteChar) {\n  quoteChar = quoteChar || '\"';\n\n  if (str[0] === quoteChar && str[str.length - 1] === quoteChar) {\n    return str.slice(1, str.length - 1);\n  }\n\n  return str;\n}\n\nfunction isUpToDate (url, requestOpts, hash, cb) {\n  if (!hash) {\n    return cb(null, false);\n  }\n\n  var query = merge({}, requestOpts, {\n    url: url,\n    headers: {\n      'If-None-Match': '\"' + hash + '\"'\n    }\n  });\n\n  var req = request.get(query);\n  req.on('response', function (res) {\n    req.abort();\n\n    if (res.statusCode === 304) {\n      return cb(null, true);\n    }\n\n    if (res.statusCode !== 200) {\n      return cb(new Error('Could not request headers from ' + url + ': ', res.statusCode));\n    }\n\n    cb(null, false);\n  }).once('error', function (err) {\n    cb(new Error('Could not request headers from ' + url + ': ' + err));\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/compute-download-urls.js":"module.exports = computeDownloadUrls;\n\nvar util = require('util');\n\nvar urls = {\n  selenium: '%s/%s/selenium-server-standalone-%s.jar',\n  chrome: '%s/%s/chromedriver_%s.zip',\n  ie: '%s/%s/IEDriverServer_%s_%s.zip',\n  firefox: '%s/%s/%s-%s-%s'\n};\n\nvar mac32;\n\n/**\n * Computes the URL to download selenium.jar and drivers.\n *\n * When passing in the `opts.drivers` param, it must be of the following format. Each of the drivers listed\n * inside is optional\n *\n * {\n *   chrome: { ... },\n *   ie: { ... },\n *   firefox: { ... }\n * }\n *\n * Each driver must have the following format.\n *\n * {\n *   baseURL: '',  // Base URL for where to download driver from\n *   version: '',  // Version number string that matches the desired driver version\n *   arch: ''      // Architecture for the desired driver\n * }\n *\n * @param {string} opts.seleniumVersion - Version number string that matches the desired selenium.jar\n * @param {string} opts.seleniumBaseURL - Base URL for where to download selenium.jar from\n * @param {Object} opts.drivers - Object containing options for various drivers. See comment for object format.\n */\nfunction computeDownloadUrls(opts, askedOpts) {\n  // 2.44.0 => 2.44\n  // 2.44.0 would be `patch`, 2.44 `minor`, 2 `major` as per semver\n\n  var downloadUrls = {\n    selenium: util.format(\n      urls.selenium,\n      opts.seleniumBaseURL,\n      opts.seleniumVersion.replace(/(\\d+\\.\\d+)\\.\\d/, \"$1\"),\n      opts.seleniumVersion\n    )\n  };\n  if (opts.drivers.chrome) {\n    if (opts.drivers.chrome.version < 2.23) {\n      mac32 = true;\n    }\n    downloadUrls.chrome = util.format(\n      urls.chrome,\n      opts.drivers.chrome.baseURL,\n      opts.drivers.chrome.version,\n      getChromeDriverPlatform(opts.drivers.chrome.arch)\n    );\n  }\n  if (opts.drivers.ie) {\n    downloadUrls.ie = util.format(\n      urls.ie,\n      opts.drivers.ie.baseURL,\n      opts.drivers.ie.version.slice(0, opts.drivers.ie.version.lastIndexOf('.')),\n      getIeDriverArchitecture(opts.drivers.ie.arch),\n      opts.drivers.ie.version\n    );\n  }\n  if (opts.drivers.firefox) {\n    downloadUrls.firefox = util.format(\n      urls.firefox,\n      opts.drivers.firefox.baseURL,\n      getFirefoxDriverDirectory(opts.drivers.firefox.version),\n      getFirefoxDriverName(opts.drivers.firefox.version),\n      getFirefoxDriverVersionForUrl(opts.drivers.firefox.version),\n      getFirefoxDriverArchitecture(opts.drivers.firefox.version, opts.drivers.firefox.arch)\n    );\n  }\n  return downloadUrls;\n}\n\nfunction getChromeDriverPlatform(wantedArchitecture) {\n  var platform;\n\n  if (process.platform === 'linux') {\n    platform = 'linux' + (wantedArchitecture === 'x64' ? '64' : '32');\n  } else if (process.platform === 'darwin') {\n    if (mac32) {\n      platform = 'mac32';\n    } else {\n      platform = 'mac64';\n    }\n  } else {\n    platform = 'win32';\n  }\n\n  return platform;\n}\n\nfunction getIeDriverArchitecture(wanted) {\n  var platform;\n\n  if (wanted === 'ia32') {\n    platform = 'Win32';\n  } else {\n    platform = 'x64';\n  }\n\n  return platform;\n}\n\n// The 0.3.0 version was release in a 'v' less directory :\n// https://github.com/mozilla/geckodriver/releases/download/0.3.0/wires-0.3.0-linux64.gz\n// Others has 'v' :\n// https://github.com/mozilla/geckodriver/releases/download/v0.4.0/wires-0.4.0-linux64.gz\nfunction getFirefoxDriverDirectory(version) {\n  var vLessVersions = ['0.3.0'];\n\n  if (vLessVersions.indexOf(version) !== -1) {\n    return version;\n  }\n  return 'v' + version;\n}\n\n// Since 0.8.0, the driver name is 'geckodriver' aka Marionette\n// Before, the diver was 'wires'\nfunction getFirefoxDriverName(version) {\n  if (compareVersions(version, '0.8.0') >= 0) {\n    return 'geckodriver';\n  }\n  return 'wires';\n}\n\n// Since 0.9, version in filename is prefixed by a 'v'\n// Before, only windows for versions 0.5.0 0.7.1 and 0.8.0 had a 'v'\nfunction getFirefoxDriverVersionForUrl(version) {\n  if (compareVersions(version, '0.9.0') >= 0) {\n    return 'v' + version;\n  } else if (\n    (process.platform === 'win32') &&\n    (['0.5.0', '0.7.1', '0.8.0'].indexOf(version) !== -1)\n  ) {\n    return 'v' + version;\n  }\n  return version;\n}\n\n\nfunction getFirefoxDriverArchitecture(version, wantedArchitecture) {\n  var platform, extension = '.tar.gz';\n\n  if (process.arch === 'arm') {\n    return 'arm7hf.tar.gz';\n  }\n  // Before 0.9, drivers were a standalone file, gzipped\n  if (compareVersions(version, '0.9.0') < 0) {\n    extension = '.gz';\n  }\n  switch (process.platform) {\n    case 'linux' :\n      return getLinuxFirefoxDriverArchitecture(version, extension, wantedArchitecture);\n    case 'darwin' :\n      return getMacFirefoxDriverArchitecture(version, extension);\n    case 'win32' :\n      return getWindowsFirefoxDriverArchitecture(version, wantedArchitecture);\n    default :\n      throw new Error('No Firefox driver is available for platform \"' + process.platform + '\"');\n  }\n}\n\nfunction getLinuxFirefoxDriverArchitecture(version, extension, wantedArchitecture) {\n  // Since 0.11.0, there is linux32 and linux64\n  if (compareVersions(version, '0.11.0') >= 0) {\n    var arch = (wantedArchitecture === 'x64' ? '64' : '32');\n    return 'linux' + arch + extension;\n  }\n  // Below this version, only x64 is available\n  if (wantedArchitecture && (wantedArchitecture !== 'x64')) {\n    throw new Error('Only x64 architecture is available for Firefox < 0.11.0')\n  }\n  return 'linux64' + extension;\n}\n\nfunction getMacFirefoxDriverArchitecture(version, extension) {\n  // >= 0.10.0 is named 'macos'\n  if (compareVersions(version, '0.10.0') >= 0) {\n    return 'macos' + extension;\n  }\n  // 0.9.0 is names 'mac'\n  if (version === '0.9.0') {\n    return 'mac' + extension;\n  }\n  // 0.6.2 to 0.8.0 are named 'OSX'\n  if ((compareVersions(version, '0.6.2') >= 0) && (compareVersions(version, '0.8.2') <= 0)) {\n    return 'OSX' + extension;\n  }\n  // All <= 0.6.0 is named 'osx'\n  return 'osx' + extension;\n}\n\nfunction getWindowsFirefoxDriverArchitecture(version, wantedArchitecture) {\n  var arch = '32';\n\n  if (wantedArchitecture && (wantedArchitecture.substr(-2) === '64')) {\n    arch = '64';\n  }\n  // Since 0.11.0, there is win32 and win64\n  if (compareVersions(version, '0.11.0') >= 0) {\n    return 'win' + arch + '.zip';\n  }\n  // 0.9.0 and 0.10.0 only have win64\n  if ((version === '0.9.0') || (version === '0.10.0')) {\n    if (wantedArchitecture && (arch !== '64')) {\n      throw new Error('Only x64 architecture is available for Firefox 0.9.0 and 0.10.0');\n    }\n    return 'win64.zip';\n  }\n  // Below there is only win32\n  if (wantedArchitecture && (arch !== '32')) {\n    throw new Error('Only 32 bits architectures are available for Firefox <= 0.8.0');\n  }\n  // 0.8.0 & 0.7.1 are named 'win32'\n  if ((version === '0.8.0') || (version === '0.7.1')) {\n    return 'win32.zip';\n  }\n  // Below is named 'win' except for 0.3.0 which is named 'windows'\n  if (version === '0.3.0') {\n    return 'windows.zip';\n  }\n  return 'win.zip';\n}\n\nfunction compareVersions (v1, v2) {\n  function split (flag, version) {\n    var result = [];\n    if (flag) {\n      var tail = version.split('-')[1];\n      var _version = version.split('-')[0];\n      result = _version.split('.');\n      tail = tail.split('.');\n      result = result.concat(tail);\n    } else {\n      result = version.split('.');\n    }\n    return result;\n  }\n\n  function convertToNumber (arr) {\n    return arr.map(function (el) {\n      return isNaN(el) ? el : parseInt(el);\n    });\n  }\n\n  var flag1 = v1.indexOf('-') > -1 ? true : false;\n  var flag2 = v2.indexOf('-') > -1 ? true : false;\n  var arr1 = split(flag1, v1);\n  var arr2 = split(flag2, v2);\n  arr1 = convertToNumber(arr1);\n  arr2 = convertToNumber(arr2);\n  var len = Math.max(arr1.length, arr2.length);\n  for (var i = 0; i < len; i ++) {\n    if (arr1[i] === undefined) {\n      return -1\n    } else if (arr2[i] === undefined) {\n      return 1\n    }\n    if (arr1[i] > arr2[i]) {\n      return 1\n    } else if(arr1[i] < arr2[i]) {\n      return -1\n    }\n  }\n  return 0;\n}\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/compute-fs-paths.js":"module.exports = computeFsPaths;\n\nvar path = require('path');\n\nvar basePath = path.join(__dirname, '..', '.selenium');\n\nfunction computeFsPaths(opts) {\n  var fsPaths = {};\n  opts.basePath = opts.basePath || basePath;\n  if (opts.drivers.chrome) {\n    fsPaths.chrome = {\n      installPath: path.join(opts.basePath, 'chromedriver', opts.drivers.chrome.version + '-' + opts.drivers.chrome.arch + '-chromedriver')\n    };\n  }\n  if (opts.drivers.ie) {\n    fsPaths.ie = {\n      installPath: path.join(opts.basePath, 'iedriver', opts.drivers.ie.version + '-' + opts.drivers.ie.arch + '-IEDriverServer.exe')\n    };\n  }\n\n  if (opts.drivers.firefox) {\n    fsPaths.firefox = {\n      installPath: path.join(opts.basePath, 'geckodriver', opts.drivers.firefox.version + '-' + opts.drivers.firefox.arch + '-geckodriver')\n    };\n  }\n\n  fsPaths.selenium = {\n    installPath: path.join(opts.basePath, 'selenium-server', opts.seleniumVersion + '-server.jar')\n  };\n\n  fsPaths = Object.keys(fsPaths).reduce(function computeDownloadPath(newFsPaths, name) {\n    var downloadPath;\n\n    if (name === 'selenium') {\n      downloadPath = newFsPaths[name].installPath;\n    } else if (name === 'firefox' && process.platform !== 'win32') {\n      downloadPath = newFsPaths[name].installPath + '.gz';\n    } else {\n      downloadPath = newFsPaths[name].installPath + '.zip';\n    }\n\n    newFsPaths[name].downloadPath = downloadPath;\n    return newFsPaths;\n  }, fsPaths);\n\n  return fsPaths;\n}\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/default-config.js":"module.exports = {\n  baseURL: 'https://selenium-release.storage.googleapis.com',\n  version: '3.3.1',\n  drivers: {\n    chrome: {\n      version: '2.28',\n      arch: process.arch,\n      baseURL: 'https://chromedriver.storage.googleapis.com'\n    },\n    ie: {\n      version: '3.0.0',\n      arch: process.arch,\n      baseURL: 'https://selenium-release.storage.googleapis.com'\n    },\n    firefox: {\n      version: '0.15.0',\n      arch: process.arch,\n      baseURL: 'https://github.com/mozilla/geckodriver/releases/download'\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/noop.js":"module.exports = noop;\n\nfunction noop() {\n\n}\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/start.js":"module.exports = start;\n\nvar debug = require('debug')('selenium-standalone:start');\nvar mapValues = require('lodash').mapValues;\nvar merge = require('lodash').merge;\nvar spawn = require('child_process').spawn;\nvar which = require('which');\n\nvar checkPathsExistence = require('./check-paths-existence');\nvar checkStarted = require('./check-started');\nvar computeFsPaths = require('./compute-fs-paths');\nvar defaultConfig = require('./default-config');\nvar noop = require('./noop');\n\nfunction start(opts, cb) {\n  debug('Start API called with', opts);\n\n  if (typeof opts === 'function') {\n    cb = opts;\n    opts = {};\n  }\n\n  if (!opts.javaArgs) {\n    opts.javaArgs = [];\n  }\n\n  if (!opts.seleniumArgs) {\n    opts.seleniumArgs = [];\n  }\n\n  if (!opts.version) {\n    opts.version = defaultConfig.version;\n  }\n\n  if (!opts.spawnCb) {\n    opts.spawnCb = noop;\n  }\n\n  if (opts.drivers) {\n    // Merge in missing driver options for those specified\n    opts.drivers = mapValues(opts.drivers, function(config, name) {\n      return merge({}, defaultConfig.drivers[name], config);\n    });\n  } else {\n    opts.drivers = defaultConfig.drivers;\n  }\n\n  var fsPaths = computeFsPaths({\n    seleniumVersion: opts.version,\n    drivers: opts.drivers,\n    basePath: opts.basePath\n  });\n\n  if (typeof cb !== 'function') {\n    throw new Error('You must provide a callback when starting selenium');\n  }\n\n  // programmatic use, did not give javaPath\n  if (!opts.javaPath) {\n    opts.javaPath = which.sync('java');\n  }\n\n  /* Command to run selenium is build in the following order:\n      0) Java executable\n      1) System level properties\n      2) Jar binary\n      3) Selenium specific arguments\n\n     Example:\n       java -Dwebdriver.chrome.driver=./.selenium/chromedriver/2.27-x64-chromedriver \\\n          -jar ./.selenium/selenium-server/3.0.1-server.jar \\\n          -role hub\n   */\n  var args = [];\n\n  if (fsPaths.chrome) {\n    args.push('-Dwebdriver.chrome.driver=' + fsPaths.chrome.installPath);\n  }\n\n  if (process.platform === 'win32' && fsPaths.ie) {\n    args.push('-Dwebdriver.ie.driver=' + fsPaths.ie.installPath);\n  } else {\n    delete fsPaths.ie;\n  }\n\n  if (fsPaths.firefox) {\n    args.push('-Dwebdriver.gecko.driver=' + fsPaths.firefox.installPath);\n  }\n\n  args = args.concat(opts.javaArgs);\n\n  args = args.concat(['-jar', fsPaths.selenium.installPath]);\n\n  args = args.concat(opts.seleniumArgs);\n\n  checkPathsExistence(getInstallPaths(fsPaths), function(err) {\n    if (err) {\n      cb(err);\n      return;\n    }\n\n    var neverStarted = false;\n    debug('Spawning Selenium Server process', opts.javaPath, args);\n    var selenium = spawn(opts.javaPath, args, opts.spawnOptions);\n\n    opts.spawnCb(selenium);\n\n    selenium.on('exit', errorIfNeverStarted);\n\n    checkStarted(args, function started(err) {\n      process.nextTick(function() {\n        // Add empty handler to stdout and stderr so the buffers can be flushed\n        // otherwise the process would eat up memory for nothing and crash\n        // we add it here so that users can register their own listeners\n        if (selenium.stdout && selenium.stderr) {\n          if (selenium.stdout.listeners('data').length === 0) {\n            selenium.stdout.on('data', noop);\n          }\n          if (selenium.stderr.listeners('data').length === 0) {\n            selenium.stderr.on('data', noop);\n          }\n        }\n      });\n\n      selenium.removeListener('exit', errorIfNeverStarted);\n\n      if (err) {\n        cb(err);\n        return;\n      }\n\n      if (!neverStarted) {\n        cb(null, selenium);\n      } // else ignore, callback has already been called in errorIfNeverStarted()\n    });\n\n    function errorIfNeverStarted(code) {\n      neverStarted = true;\n\n      var errorMsg;\n      if (code === 1) {\n        errorMsg = 'Selenium server did not start.\\n';\n      } else {\n       errorMsg = 'Selenium exited before it could start\\n';\n      }\n      errorMsg += 'Another Selenium process may already be running or your java version may be out of date.\\n';\n\n      // TODO: Is there a way to get this info from the api?\n      // 3.x requires Java 8+, 2.47.0+ requires Java 7 - 7 is also end-of-life apparently ?\n      errorMsg += 'Be sure to check the official Selenium release notes for minimum required java version: https://raw.githubusercontent.com/SeleniumHQ/selenium/master/java/CHANGELOG\\n';\n\n      cb(new Error(errorMsg));\n    }\n  });\n}\n\nfunction getInstallPaths(fsPaths) {\n  return Object.keys(fsPaths).map(function(name) {\n    return fsPaths[name].installPath;\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/check-paths-existence.js":"module.exports = checkPathsExistence;\n\nvar async = require('async');\nvar fs = require('fs');\n\nfunction checkPathsExistence(paths, cb) {\n  paths = Object.keys(paths).map(function(key) {\n    return paths[key];\n  });\n\n  async.parallel(paths.map(function(path) {\n    return function(existsCb) {\n      fs.exists(path, function(res) {\n        if (res === false) {\n          existsCb(new Error('Missing ' + path));\n          return;\n        }\n\n        existsCb();\n      });\n    };\n  }), cb);\n}\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/check-started.js":"module.exports = checkStarted;\n\nvar request = require('request').defaults({json: true});\nvar statusUrl = require('./get-selenium-status-url.js');\n\nfunction checkStarted(seleniumArgs, cb) {\n  var retries = 0;\n  var hub = statusUrl.getSeleniumStatusUrl(seleniumArgs);\n  // server has one minute to start\n  var retryInterval = 200;\n  var maxRetries = 60 * 1000 / retryInterval;\n\n  function hasStarted() {\n    retries++;\n\n    if (retries > maxRetries) {\n      cb(new Error('Unable to connect to selenium'));\n      return;\n    }\n\n    request(hub, function (err, res) {\n      if (err || res.statusCode !== 200) {\n        setTimeout(hasStarted, retryInterval);\n        return;\n      }\n      cb(null);\n    });\n  }\n\n  setTimeout(hasStarted, 500);\n}\n","/home/travis/build/npmtest/node-npmtest-selenium-standalone/node_modules/selenium-standalone/lib/get-selenium-status-url.js":"var URI = require('urijs');\nvar PROCESS_TYPES = exports.PROCESS_TYPES = {\n  STANDALONE: 0,\n  GRID_HUB: 1,\n  GRID_NODE: 2\n};\n\nexports.getRunningProcessType = function(seleniumArgs) {\n  var roleArg = seleniumArgs.indexOf('-role');\n  var role = (roleArg !== -1) ? seleniumArgs[roleArg + 1] : undefined;\n\n  if (roleArg === -1) return PROCESS_TYPES.STANDALONE;\n  else if (role === 'hub') return PROCESS_TYPES.GRID_HUB;\n  else if (role === 'node') return PROCESS_TYPES.GRID_NODE;\n  else return undefined;\n}\n\nexports.getSeleniumStatusUrl = function(seleniumArgs) {\n  var processType = this.getRunningProcessType(seleniumArgs);\n  var portArg = seleniumArgs.indexOf('-port');\n  var port = (portArg !== -1) ? seleniumArgs[portArg + 1] : undefined;\n  var hostArg = seleniumArgs.indexOf('-host');\n  var host = (hostArg !== -1) ? seleniumArgs[hostArg + 1] : 'localhost';\n\n  var statusURI = new URI('http://' + host);\n  var nodeStatusAPIPath = '/wd/hub/status';\n  var hubStatusAPIPath = '/grid/api/hub';\n\n  switch (processType) {\n    case PROCESS_TYPES.STANDALONE:\n      statusURI.port(4444);\n      statusURI.path(nodeStatusAPIPath);\n      break;\n    case PROCESS_TYPES.GRID_HUB:\n      statusURI.port(4444);\n      statusURI.path(hubStatusAPIPath);\n      break;\n    case PROCESS_TYPES.GRID_NODE:\n      statusURI.port(5555);\n      statusURI.path(nodeStatusAPIPath);\n      break;\n    default:\n      throw 'ERROR: Trying to run selenium in an unknown way.';\n  }\n\n  // Running with a non-default port\n  if (portArg !== -1) {\n    statusURI.port(seleniumArgs[portArg + 1]);\n  }\n\n  return statusURI.toString();\n}\n"}